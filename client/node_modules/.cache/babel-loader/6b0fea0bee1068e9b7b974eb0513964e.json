{"ast":null,"code":"var _jsxFileName = \"/Users/edgarspuce/React/spending-tool/src/MaterialUITable.js\";\nimport React from \"react\";\nimport MaterialTable from \"material-table\";\nexport default function MaterialTableDemo(props) {\n  const {\n    name,\n    items\n  } = props;\n  const [data, setData] = React.useState([]); //table data\n\n  React.useEffect(() => {\n    return () => {\n      setData(items);\n    };\n  });\n  const columns = [{\n    title: \"ID\",\n    field: \"id\"\n  }, {\n    title: \"Type\",\n    field: \"type\"\n  }, {\n    title: \"Place\",\n    field: \"place\"\n  }, {\n    title: \"Amount\",\n    field: \"amount\",\n    type: \"numeric\"\n  }]; //   const [state, setState] = React.useState({\n  //     columns: [\n  //       { title: \"ID\", field: \"id\" },\n  //       { title: \"Type\", field: \"type\" },\n  //       { title: \"Place\", field: \"place\" },\n  //       { title: \"Amount\", field: \"amount\", type: \"numeric\" },\n  //     ],\n  //   });\n\n  return /*#__PURE__*/React.createElement(MaterialTable, {\n    title: \"User list from API\",\n    columns: columns,\n    data: data,\n    icons: tableIcons,\n    editable: {\n      onRowUpdate: (newData, oldData) => new Promise(resolve => {\n        handleRowUpdate(newData, oldData, resolve);\n      }),\n      onRowAdd: newData => new Promise(resolve => {\n        handleRowAdd(newData, resolve);\n      }),\n      onRowDelete: oldData => new Promise(resolve => {\n        handleRowDelete(oldData, resolve);\n      })\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }) // <MaterialTable\n  //   options={{\n  //     search: false,\n  //   }}\n  //   title={name}\n  //   columns={state.columns}\n  //   data={data}\n  //   editable={{\n  //     onRowAdd: (newData) =>\n  //       new Promise((resolve) => {\n  //         setTimeout(() => {\n  //           resolve();\n  //           setData((prevData) => {\n  //             const data = [...prevData];\n  //             data.push(newData);\n  //             return { ...prevData, data };\n  //           });\n  //         }, 600);\n  //       }),\n  //     onRowUpdate: (newData, oldData) =>\n  //       new Promise((resolve) => {\n  //         setTimeout(() => {\n  //           resolve();\n  //           if (oldData) {\n  //             setData((prevData) => {\n  //               const data = [...prevData];\n  //               data[data.indexOf(oldData)] = newData;\n  //               return { ...prevData, data };\n  //             });\n  //           }\n  //         }, 600);\n  //       }),\n  //     onRowDelete: (oldData) =>\n  //       new Promise((resolve) => {\n  //         setTimeout(() => {\n  //           resolve();\n  //           setData((prevData) => {\n  //             const data = [...prevData];\n  //             data.splice(data.indexOf(oldData), 1);\n  //             return { ...prevData, data };\n  //           });\n  //         }, 600);\n  //       }),\n  //   }}\n  // />\n  ;\n}","map":{"version":3,"sources":["/Users/edgarspuce/React/spending-tool/src/MaterialUITable.js"],"names":["React","MaterialTable","MaterialTableDemo","props","name","items","data","setData","useState","useEffect","columns","title","field","type","tableIcons","onRowUpdate","newData","oldData","Promise","resolve","handleRowUpdate","onRowAdd","handleRowAdd","onRowDelete","handleRowDelete"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,gBAA1B;AAEA,eAAe,SAASC,iBAAT,CAA2BC,KAA3B,EAAkC;AAC/C,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAkBF,KAAxB;AAEA,QAAM,CAACG,IAAD,EAAOC,OAAP,IAAkBP,KAAK,CAACQ,QAAN,CAAe,EAAf,CAAxB,CAH+C,CAGH;;AAE5CR,EAAAA,KAAK,CAACS,SAAN,CAAgB,MAAM;AACpB,WAAO,MAAM;AACXF,MAAAA,OAAO,CAACF,KAAD,CAAP;AACD,KAFD;AAGD,GAJD;AAKA,QAAMK,OAAO,GAAG,CACd;AAAEC,IAAAA,KAAK,EAAE,IAAT;AAAeC,IAAAA,KAAK,EAAE;AAAtB,GADc,EAEd;AAAED,IAAAA,KAAK,EAAE,MAAT;AAAiBC,IAAAA,KAAK,EAAE;AAAxB,GAFc,EAGd;AAAED,IAAAA,KAAK,EAAE,OAAT;AAAkBC,IAAAA,KAAK,EAAE;AAAzB,GAHc,EAId;AAAED,IAAAA,KAAK,EAAE,QAAT;AAAmBC,IAAAA,KAAK,EAAE,QAA1B;AAAoCC,IAAAA,IAAI,EAAE;AAA1C,GAJc,CAAhB,CAV+C,CAiB/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBACE,oBAAC,aAAD;AACE,IAAA,KAAK,EAAC,oBADR;AAEE,IAAA,OAAO,EAAEH,OAFX;AAGE,IAAA,IAAI,EAAEJ,IAHR;AAIE,IAAA,KAAK,EAAEQ,UAJT;AAKE,IAAA,QAAQ,EAAE;AACRC,MAAAA,WAAW,EAAE,CAACC,OAAD,EAAUC,OAAV,KACX,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AACvBC,QAAAA,eAAe,CAACJ,OAAD,EAAUC,OAAV,EAAmBE,OAAnB,CAAf;AACD,OAFD,CAFM;AAKRE,MAAAA,QAAQ,EAAGL,OAAD,IACR,IAAIE,OAAJ,CAAaC,OAAD,IAAa;AACvBG,QAAAA,YAAY,CAACN,OAAD,EAAUG,OAAV,CAAZ;AACD,OAFD,CANM;AASRI,MAAAA,WAAW,EAAGN,OAAD,IACX,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AACvBK,QAAAA,eAAe,CAACP,OAAD,EAAUE,OAAV,CAAf;AACD,OAFD;AAVM,KALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAqBE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjEF;AAmED","sourcesContent":["import React from \"react\";\nimport MaterialTable from \"material-table\";\n\nexport default function MaterialTableDemo(props) {\n  const { name, items } = props;\n\n  const [data, setData] = React.useState([]); //table data\n\n  React.useEffect(() => {\n    return () => {\n      setData(items);\n    };\n  });\n  const columns = [\n    { title: \"ID\", field: \"id\" },\n    { title: \"Type\", field: \"type\" },\n    { title: \"Place\", field: \"place\" },\n    { title: \"Amount\", field: \"amount\", type: \"numeric\" },\n  ];\n\n  //   const [state, setState] = React.useState({\n  //     columns: [\n  //       { title: \"ID\", field: \"id\" },\n  //       { title: \"Type\", field: \"type\" },\n  //       { title: \"Place\", field: \"place\" },\n  //       { title: \"Amount\", field: \"amount\", type: \"numeric\" },\n  //     ],\n  //   });\n\n  return (\n    <MaterialTable\n      title=\"User list from API\"\n      columns={columns}\n      data={data}\n      icons={tableIcons}\n      editable={{\n        onRowUpdate: (newData, oldData) =>\n          new Promise((resolve) => {\n            handleRowUpdate(newData, oldData, resolve);\n          }),\n        onRowAdd: (newData) =>\n          new Promise((resolve) => {\n            handleRowAdd(newData, resolve);\n          }),\n        onRowDelete: (oldData) =>\n          new Promise((resolve) => {\n            handleRowDelete(oldData, resolve);\n          }),\n      }}\n    />\n    // <MaterialTable\n    //   options={{\n    //     search: false,\n    //   }}\n    //   title={name}\n    //   columns={state.columns}\n    //   data={data}\n    //   editable={{\n    //     onRowAdd: (newData) =>\n    //       new Promise((resolve) => {\n    //         setTimeout(() => {\n    //           resolve();\n    //           setData((prevData) => {\n    //             const data = [...prevData];\n    //             data.push(newData);\n    //             return { ...prevData, data };\n    //           });\n    //         }, 600);\n    //       }),\n    //     onRowUpdate: (newData, oldData) =>\n    //       new Promise((resolve) => {\n    //         setTimeout(() => {\n    //           resolve();\n    //           if (oldData) {\n    //             setData((prevData) => {\n    //               const data = [...prevData];\n    //               data[data.indexOf(oldData)] = newData;\n    //               return { ...prevData, data };\n    //             });\n    //           }\n    //         }, 600);\n    //       }),\n    //     onRowDelete: (oldData) =>\n    //       new Promise((resolve) => {\n    //         setTimeout(() => {\n    //           resolve();\n    //           setData((prevData) => {\n    //             const data = [...prevData];\n    //             data.splice(data.indexOf(oldData), 1);\n    //             return { ...prevData, data };\n    //           });\n    //         }, 600);\n    //       }),\n    //   }}\n    // />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}