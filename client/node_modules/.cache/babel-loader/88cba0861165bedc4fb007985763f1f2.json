{"ast":null,"code":"var _jsxFileName = \"/Users/edgarspuce/React/spending-tool/src/MaterialUI/MaterialUITable.js\";\nimport React from \"react\";\nimport MaterialTable from \"material-table\";\nimport CustomGroupRow from \"./CustomComponent\";\nimport Total from \"./Total\";\nexport default function MaterialTableDemo(props) {\n  const {\n    type,\n    handleSubmit,\n    removeItem,\n    editItem\n  } = props;\n  const [data, setData] = React.useState([]); //table data\n\n  React.useEffect(() => {\n    fetch(\"http://localhost:9000/getitems\").then(res => res.json()).then(res => {\n      // let t = res.filter((item) => {\n      //   return item.type === type;\n      // });\n      setData(res);\n    }).catch(error => {});\n  }, []); // defaultGroupOrder: 0\n\n  const columns = [{\n    title: \"Type\",\n    field: \"type\",\n    defaultGroupOrder: 0\n  }, {\n    title: \"Place\",\n    field: \"place\"\n  }, {\n    title: \"Amount\",\n    field: \"amount\",\n    type: \"numeric\"\n  }]; //const tableName = type + \" \" + data.length;\n\n  const tableName = () => {\n    let count = \"Total item count: \" + data.length; //const tname = pro + \" \" + data.length;\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 7\n      }\n    }, count, \"  \", /*#__PURE__*/React.createElement(Total, {\n      items: data,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }\n    }));\n  };\n\n  const handleRowAdd = (newData, resolve) => {\n    // fetch(\"http://localhost:9000/additem\", {\n    //   method: \"POST\",\n    //   headers: {\n    //     \"Content-Type\": \"application/json\",\n    //   },\n    //   body: JSON.stringify(newData),\n    // })\n    //   .then((response) => response.json())\n    //   .then((res) => {\n    //     let dataToAdd = [...data];\n    //     dataToAdd.push(newData);\n    //     setData(dataToAdd);\n    //     resolve();\n    //   })\n    //   .catch((error) => {\n    //     console.error(\"Error:\", error);\n    //     resolve();\n    //   });\n    //newData.type = type;\n    handleSubmit(newData);\n    let dataToAdd = [...data];\n    dataToAdd.push(newData);\n    setData(dataToAdd);\n    resolve();\n  };\n\n  const handleRowUpdate = (newData, oldData, resolve) => {\n    // console.log(\"row updated: \" + newData);\n    editItem(newData);\n    const dataUpdate = [...data];\n    const index = oldData.tableData.id;\n    dataUpdate[index] = newData;\n    setData([...dataUpdate]);\n    resolve();\n  };\n\n  const handleRowDelete = (oldData, resolve) => {\n    // console.log(\"row deleted: \" + oldData);\n    removeItem(oldData.id);\n    const dataDelete = [...data];\n    const index = oldData.tableData.id;\n    dataDelete.splice(index, 1);\n    setData([...dataDelete]);\n    resolve();\n  };\n\n  const customRow = rowData => {\n    console.log(rowData);\n    return /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      colSpan: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"table\", {\n      className: \"w-100\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(CustomGroupRow, Object.assign({}, rowData, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }\n    })))));\n  };\n\n  return /*#__PURE__*/React.createElement(MaterialTable, {\n    options: {\n      search: false,\n      grouping: true,\n      actionsColumnIndex: -1\n    },\n    components: {\n      GroupRow: rowData => customRow(rowData)\n    } // actions={[\n    //   {\n    //     icon: \"add an alarm\",\n    //   },\n    // ]}\n    ,\n    title: tableName(),\n    columns: columns,\n    data: data,\n    editable: {\n      onRowUpdate: (newData, oldData) => new Promise(resolve => {\n        handleRowUpdate(newData, oldData, resolve);\n      }),\n      onRowAdd: newData => new Promise(resolve => {\n        handleRowAdd(newData, resolve);\n      }),\n      onRowDelete: oldData => new Promise(resolve => {\n        handleRowDelete(oldData, resolve);\n      })\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 5\n    }\n  }) // <MaterialTable\n  //   options={{\n  //     search: false,\n  //   }}\n  //   title={name}\n  //   columns={state.columns}\n  //   data={data}\n  //   editable={{\n  //     onRowAdd: (newData) =>\n  //       new Promise((resolve) => {\n  //         setTimeout(() => {\n  //           resolve();\n  //           setData((prevData) => {\n  //             const data = [...prevData];\n  //             data.push(newData);\n  //             return { ...prevData, data };\n  //           });\n  //         }, 600);\n  //       }),\n  //     onRowUpdate: (newData, oldData) =>\n  //       new Promise((resolve) => {\n  //         setTimeout(() => {\n  //           resolve();\n  //           if (oldData) {\n  //             setData((prevData) => {\n  //               const data = [...prevData];\n  //               data[data.indexOf(oldData)] = newData;\n  //               return { ...prevData, data };\n  //             });\n  //           }\n  //         }, 600);\n  //       }),\n  //     onRowDelete: (oldData) =>\n  //       new Promise((resolve) => {\n  //         setTimeout(() => {\n  //           resolve();\n  //           setData((prevData) => {\n  //             const data = [...prevData];\n  //             data.splice(data.indexOf(oldData), 1);\n  //             return { ...prevData, data };\n  //           });\n  //         }, 600);\n  //       }),\n  //   }}\n  // />\n  ;\n}","map":{"version":3,"sources":["/Users/edgarspuce/React/spending-tool/src/MaterialUI/MaterialUITable.js"],"names":["React","MaterialTable","CustomGroupRow","Total","MaterialTableDemo","props","type","handleSubmit","removeItem","editItem","data","setData","useState","useEffect","fetch","then","res","json","catch","error","columns","title","field","defaultGroupOrder","tableName","count","length","handleRowAdd","newData","resolve","dataToAdd","push","handleRowUpdate","oldData","dataUpdate","index","tableData","id","handleRowDelete","dataDelete","splice","customRow","rowData","console","log","search","grouping","actionsColumnIndex","GroupRow","onRowUpdate","Promise","onRowAdd","onRowDelete"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport MaterialTable from \"material-table\";\nimport CustomGroupRow from \"./CustomComponent\";\nimport Total from \"./Total\";\n\nexport default function MaterialTableDemo(props) {\n  const { type, handleSubmit, removeItem, editItem } = props;\n\n  const [data, setData] = React.useState([]); //table data\n\n  React.useEffect(() => {\n    fetch(\"http://localhost:9000/getitems\")\n      .then((res) => res.json())\n      .then((res) => {\n        // let t = res.filter((item) => {\n        //   return item.type === type;\n        // });\n        setData(res);\n      })\n      .catch((error) => {});\n  }, []);\n  // defaultGroupOrder: 0\n  const columns = [\n    { title: \"Type\", field: \"type\", defaultGroupOrder: 0 },\n    { title: \"Place\", field: \"place\" },\n    { title: \"Amount\", field: \"amount\", type: \"numeric\" },\n  ];\n\n  //const tableName = type + \" \" + data.length;\n\n  const tableName = () => {\n    let count = \"Total item count: \" + data.length;\n    //const tname = pro + \" \" + data.length;\n    return (\n      <div>\n        {count}\n        {\"  \"}\n        <Total items={data} />\n      </div>\n    );\n  };\n\n  const handleRowAdd = (newData, resolve) => {\n    // fetch(\"http://localhost:9000/additem\", {\n    //   method: \"POST\",\n    //   headers: {\n    //     \"Content-Type\": \"application/json\",\n    //   },\n    //   body: JSON.stringify(newData),\n    // })\n    //   .then((response) => response.json())\n    //   .then((res) => {\n    //     let dataToAdd = [...data];\n    //     dataToAdd.push(newData);\n    //     setData(dataToAdd);\n    //     resolve();\n    //   })\n    //   .catch((error) => {\n    //     console.error(\"Error:\", error);\n    //     resolve();\n    //   });\n    //newData.type = type;\n    handleSubmit(newData);\n    let dataToAdd = [...data];\n    dataToAdd.push(newData);\n    setData(dataToAdd);\n    resolve();\n  };\n\n  const handleRowUpdate = (newData, oldData, resolve) => {\n    // console.log(\"row updated: \" + newData);\n    editItem(newData);\n    const dataUpdate = [...data];\n    const index = oldData.tableData.id;\n    dataUpdate[index] = newData;\n    setData([...dataUpdate]);\n    resolve();\n  };\n\n  const handleRowDelete = (oldData, resolve) => {\n    // console.log(\"row deleted: \" + oldData);\n    removeItem(oldData.id);\n    const dataDelete = [...data];\n    const index = oldData.tableData.id;\n    dataDelete.splice(index, 1);\n    setData([...dataDelete]);\n    resolve();\n  };\n\n  const customRow = (rowData) => {\n    console.log(rowData);\n    return (\n      <tr>\n        <td colSpan=\"4\">\n          <table className=\"w-100\">\n            <CustomGroupRow {...rowData} />\n          </table>\n        </td>\n      </tr>\n    );\n  };\n\n  return (\n    <MaterialTable\n      options={{\n        search: false,\n        grouping: true,\n        actionsColumnIndex: -1,\n      }}\n      components={{\n        GroupRow: (rowData) => customRow(rowData),\n      }}\n      // actions={[\n      //   {\n      //     icon: \"add an alarm\",\n      //   },\n      // ]}\n      title={tableName()}\n      columns={columns}\n      data={data}\n      editable={{\n        onRowUpdate: (newData, oldData) =>\n          new Promise((resolve) => {\n            handleRowUpdate(newData, oldData, resolve);\n          }),\n        onRowAdd: (newData) =>\n          new Promise((resolve) => {\n            handleRowAdd(newData, resolve);\n          }),\n        onRowDelete: (oldData) =>\n          new Promise((resolve) => {\n            handleRowDelete(oldData, resolve);\n          }),\n      }}\n    />\n    // <MaterialTable\n    //   options={{\n    //     search: false,\n    //   }}\n    //   title={name}\n    //   columns={state.columns}\n    //   data={data}\n    //   editable={{\n    //     onRowAdd: (newData) =>\n    //       new Promise((resolve) => {\n    //         setTimeout(() => {\n    //           resolve();\n    //           setData((prevData) => {\n    //             const data = [...prevData];\n    //             data.push(newData);\n    //             return { ...prevData, data };\n    //           });\n    //         }, 600);\n    //       }),\n    //     onRowUpdate: (newData, oldData) =>\n    //       new Promise((resolve) => {\n    //         setTimeout(() => {\n    //           resolve();\n    //           if (oldData) {\n    //             setData((prevData) => {\n    //               const data = [...prevData];\n    //               data[data.indexOf(oldData)] = newData;\n    //               return { ...prevData, data };\n    //             });\n    //           }\n    //         }, 600);\n    //       }),\n    //     onRowDelete: (oldData) =>\n    //       new Promise((resolve) => {\n    //         setTimeout(() => {\n    //           resolve();\n    //           setData((prevData) => {\n    //             const data = [...prevData];\n    //             data.splice(data.indexOf(oldData), 1);\n    //             return { ...prevData, data };\n    //           });\n    //         }, 600);\n    //       }),\n    //   }}\n    // />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}