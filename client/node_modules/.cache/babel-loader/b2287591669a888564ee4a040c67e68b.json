{"ast":null,"code":"var _jsxFileName = \"/Users/edgarspuce/React/spending-tool/src/MaterialUITable.js\";\nimport React from \"react\";\nimport MaterialTable from \"material-table\";\nexport default function MaterialTableDemo(props) {\n  const {\n    name,\n    items,\n    handleSubmit\n  } = props;\n  const [data, setData] = React.useState([]); //table data\n\n  React.useEffect(() => {\n    fetch(\"http://localhost:9000/getitems\").then(res => {\n      setData(res.data);\n    }).catch(error => {});\n  }, []);\n  const columns = [{\n    title: \"ID\",\n    field: \"id\"\n  }, {\n    title: \"Type\",\n    field: \"type\"\n  }, {\n    title: \"Place\",\n    field: \"place\"\n  }, {\n    title: \"Amount\",\n    field: \"amount\",\n    type: \"numeric\"\n  }]; //   const getData = () => {\n  //     fetch(\"http://localhost:9000/getitems\")\n  //       .then((res) => res.json())\n  //       .then((res) => setData(res));\n  //   };\n  //   const [state, setState] = React.useState({\n  //     columns: [\n  //       { title: \"ID\", field: \"id\" },\n  //       { title: \"Type\", field: \"type\" },\n  //       { title: \"Place\", field: \"place\" },\n  //       { title: \"Amount\", field: \"amount\", type: \"numeric\" },\n  //     ],\n  //   });\n\n  const handleRowAdd = (newData, resolve) => {\n    fetch(\"http://localhost:9000/additem\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newData)\n    }).then(response => response.json()).then(res => {\n      let dataToAdd = [...data];\n      dataToAdd.push(newData);\n      setData(dataToAdd);\n      resolve();\n    }).catch(error => {\n      console.error(\"Error:\", error);\n      resolve();\n    });\n    resolve(); // api\n    //   .post(\"/users\", newData)\n    //   .then((res) => {\n    //     let dataToAdd = [...data];\n    //     dataToAdd.push(newData);\n    //     setData(dataToAdd);\n    //     resolve();\n    //   })\n    //   .catch((error) => {\n    //     resolve();\n    //});\n  };\n\n  const handleRowUpdate = (newData, oldData, resolve) => {\n    console.log(\"row updated: \" + newData); //   api.patch(\"/users/\"+newData.id, newData)\n    //     .then(res => {\n    //       const dataUpdate = [...data];\n    //       const index = oldData.tableData.id;\n    //       dataUpdate[index] = newData;\n    //       setData([...dataUpdate]);\n    //       resolve()\n    //     })\n    //     .catch(error => {\n    //       resolve()\n    //   })\n  };\n\n  const handleRowDelete = (oldData, resolve) => {\n    console.log(\"row deleted: \" + oldData); // api\n    //   .delete(\"/users/\" + oldData.id)\n    //   .then((res) => {\n    //     const dataDelete = [...data];\n    //     const index = oldData.tableData.id;\n    //     dataDelete.splice(index, 1);\n    //     setData([...dataDelete]);\n    //     resolve();\n    //   })\n    //   .catch((error) => {\n    //     setErrorMessages([\"Delete failed! Server error\"]);\n    //     setIserror(true);\n    //     resolve();\n    //   });\n  };\n\n  return /*#__PURE__*/React.createElement(MaterialTable, {\n    title: name,\n    columns: columns,\n    data: data,\n    editable: {\n      onRowUpdate: (newData, oldData) => new Promise(resolve => {\n        handleRowUpdate(newData, oldData, resolve);\n      }),\n      onRowAdd: newData => new Promise(resolve => {\n        handleRowAdd(newData, resolve);\n      }),\n      onRowDelete: oldData => new Promise(resolve => {\n        handleRowDelete(oldData, resolve);\n      })\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 5\n    }\n  }) // <MaterialTable\n  //   options={{\n  //     search: false,\n  //   }}\n  //   title={name}\n  //   columns={state.columns}\n  //   data={data}\n  //   editable={{\n  //     onRowAdd: (newData) =>\n  //       new Promise((resolve) => {\n  //         setTimeout(() => {\n  //           resolve();\n  //           setData((prevData) => {\n  //             const data = [...prevData];\n  //             data.push(newData);\n  //             return { ...prevData, data };\n  //           });\n  //         }, 600);\n  //       }),\n  //     onRowUpdate: (newData, oldData) =>\n  //       new Promise((resolve) => {\n  //         setTimeout(() => {\n  //           resolve();\n  //           if (oldData) {\n  //             setData((prevData) => {\n  //               const data = [...prevData];\n  //               data[data.indexOf(oldData)] = newData;\n  //               return { ...prevData, data };\n  //             });\n  //           }\n  //         }, 600);\n  //       }),\n  //     onRowDelete: (oldData) =>\n  //       new Promise((resolve) => {\n  //         setTimeout(() => {\n  //           resolve();\n  //           setData((prevData) => {\n  //             const data = [...prevData];\n  //             data.splice(data.indexOf(oldData), 1);\n  //             return { ...prevData, data };\n  //           });\n  //         }, 600);\n  //       }),\n  //   }}\n  // />\n  ;\n}","map":{"version":3,"sources":["/Users/edgarspuce/React/spending-tool/src/MaterialUITable.js"],"names":["React","MaterialTable","MaterialTableDemo","props","name","items","handleSubmit","data","setData","useState","useEffect","fetch","then","res","catch","error","columns","title","field","type","handleRowAdd","newData","resolve","method","headers","body","JSON","stringify","response","json","dataToAdd","push","console","handleRowUpdate","oldData","log","handleRowDelete","onRowUpdate","Promise","onRowAdd","onRowDelete"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport MaterialTable from \"material-table\";\n\nexport default function MaterialTableDemo(props) {\n  const { name, items, handleSubmit } = props;\n\n  const [data, setData] = React.useState([]); //table data\n\n  React.useEffect(() => {\n    fetch(\"http://localhost:9000/getitems\")\n      .then((res) => {\n        setData(res.data);\n      })\n      .catch((error) => {});\n  }, []);\n  const columns = [\n    { title: \"ID\", field: \"id\" },\n    { title: \"Type\", field: \"type\" },\n    { title: \"Place\", field: \"place\" },\n    { title: \"Amount\", field: \"amount\", type: \"numeric\" },\n  ];\n  //   const getData = () => {\n  //     fetch(\"http://localhost:9000/getitems\")\n  //       .then((res) => res.json())\n  //       .then((res) => setData(res));\n  //   };\n  //   const [state, setState] = React.useState({\n  //     columns: [\n  //       { title: \"ID\", field: \"id\" },\n  //       { title: \"Type\", field: \"type\" },\n  //       { title: \"Place\", field: \"place\" },\n  //       { title: \"Amount\", field: \"amount\", type: \"numeric\" },\n  //     ],\n  //   });\n\n  const handleRowAdd = (newData, resolve) => {\n    fetch(\"http://localhost:9000/additem\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(newData),\n    })\n      .then((response) => response.json())\n      .then((res) => {\n        let dataToAdd = [...data];\n        dataToAdd.push(newData);\n        setData(dataToAdd);\n        resolve();\n      })\n      .catch((error) => {\n        console.error(\"Error:\", error);\n        resolve();\n      });\n\n    resolve();\n    // api\n    //   .post(\"/users\", newData)\n    //   .then((res) => {\n    //     let dataToAdd = [...data];\n    //     dataToAdd.push(newData);\n    //     setData(dataToAdd);\n    //     resolve();\n    //   })\n    //   .catch((error) => {\n    //     resolve();\n    //});\n  };\n\n  const handleRowUpdate = (newData, oldData, resolve) => {\n    console.log(\"row updated: \" + newData);\n    //   api.patch(\"/users/\"+newData.id, newData)\n    //     .then(res => {\n    //       const dataUpdate = [...data];\n    //       const index = oldData.tableData.id;\n    //       dataUpdate[index] = newData;\n    //       setData([...dataUpdate]);\n    //       resolve()\n\n    //     })\n    //     .catch(error => {\n\n    //       resolve()\n    //   })\n  };\n\n  const handleRowDelete = (oldData, resolve) => {\n    console.log(\"row deleted: \" + oldData);\n    // api\n    //   .delete(\"/users/\" + oldData.id)\n    //   .then((res) => {\n    //     const dataDelete = [...data];\n    //     const index = oldData.tableData.id;\n    //     dataDelete.splice(index, 1);\n    //     setData([...dataDelete]);\n    //     resolve();\n    //   })\n    //   .catch((error) => {\n    //     setErrorMessages([\"Delete failed! Server error\"]);\n    //     setIserror(true);\n    //     resolve();\n    //   });\n  };\n\n  return (\n    <MaterialTable\n      title={name}\n      columns={columns}\n      data={data}\n      editable={{\n        onRowUpdate: (newData, oldData) =>\n          new Promise((resolve) => {\n            handleRowUpdate(newData, oldData, resolve);\n          }),\n        onRowAdd: (newData) =>\n          new Promise((resolve) => {\n            handleRowAdd(newData, resolve);\n          }),\n        onRowDelete: (oldData) =>\n          new Promise((resolve) => {\n            handleRowDelete(oldData, resolve);\n          }),\n      }}\n    />\n    // <MaterialTable\n    //   options={{\n    //     search: false,\n    //   }}\n    //   title={name}\n    //   columns={state.columns}\n    //   data={data}\n    //   editable={{\n    //     onRowAdd: (newData) =>\n    //       new Promise((resolve) => {\n    //         setTimeout(() => {\n    //           resolve();\n    //           setData((prevData) => {\n    //             const data = [...prevData];\n    //             data.push(newData);\n    //             return { ...prevData, data };\n    //           });\n    //         }, 600);\n    //       }),\n    //     onRowUpdate: (newData, oldData) =>\n    //       new Promise((resolve) => {\n    //         setTimeout(() => {\n    //           resolve();\n    //           if (oldData) {\n    //             setData((prevData) => {\n    //               const data = [...prevData];\n    //               data[data.indexOf(oldData)] = newData;\n    //               return { ...prevData, data };\n    //             });\n    //           }\n    //         }, 600);\n    //       }),\n    //     onRowDelete: (oldData) =>\n    //       new Promise((resolve) => {\n    //         setTimeout(() => {\n    //           resolve();\n    //           setData((prevData) => {\n    //             const data = [...prevData];\n    //             data.splice(data.indexOf(oldData), 1);\n    //             return { ...prevData, data };\n    //           });\n    //         }, 600);\n    //       }),\n    //   }}\n    // />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}