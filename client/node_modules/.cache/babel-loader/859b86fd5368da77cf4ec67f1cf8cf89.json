{"ast":null,"code":"var _jsxFileName = \"/Users/edgarspuce/React/spending-tool/src/MaterialUI/CustomComponent.js\";\n\n/* eslint-disable no-unused-vars */\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport PropTypes from \"prop-types\";\nimport * as React from \"react\";\n/* eslint-enable no-unused-vars */\n\nimport CustomCell from \"./CustomCell\";\nexport default class CustomGroupRow extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.rotateIconStyle = isOpen => ({\n      transform: isOpen ? \"rotate(90deg)\" : \"none\"\n    });\n  }\n\n  render() {\n    let colSpan = this.props.columns.filter(columnDef => !columnDef.hidden).length;\n    this.props.options.selection && colSpan++;\n    this.props.detailPanel && colSpan++;\n    this.props.actions && this.props.actions.length > 0 && colSpan++;\n    const column = this.props.groups[this.props.level];\n    let detail;\n\n    if (this.props.groupData.isExpanded) {\n      if (this.props.groups.length > this.props.level + 1) {\n        // Is there another group\n        detail = this.props.groupData.groups.map((groupData, index) => /*#__PURE__*/React.createElement(this.props.components.GroupRow, {\n          actions: this.props.actions,\n          key: groupData.value || \"\" + index,\n          columns: this.props.columns,\n          components: this.props.components,\n          detailPanel: this.props.detailPanel,\n          getFieldValue: this.props.getFieldValue,\n          groupData: groupData,\n          groups: this.props.groups,\n          icons: this.props.icons,\n          level: this.props.level + 1,\n          path: [...this.props.path, index],\n          onGroupExpandChanged: this.props.onGroupExpandChanged,\n          onRowSelected: this.props.onRowSelected,\n          onRowClick: this.props.onRowClick,\n          onToggleDetailPanel: this.props.onToggleDetailPanel,\n          onTreeExpandChanged: this.props.onTreeExpandChanged,\n          onEditingCanceled: this.props.onEditingCanceled,\n          onEditingApproved: this.props.onEditingApproved,\n          options: this.props.options,\n          hasAnyEditingRow: this.props.hasAnyEditingRow,\n          isTreeData: this.props.isTreeData,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 11\n          }\n        }));\n      } else {\n        detail = this.props.groupData.data.map((rowData, index) => {\n          if (rowData.tableData.editing) {\n            return /*#__PURE__*/React.createElement(this.props.components.EditRow, {\n              columns: this.props.columns,\n              components: this.props.components,\n              data: rowData,\n              icons: this.props.icons,\n              path: [...this.props.path, index],\n              localization: this.props.localization,\n              key: index,\n              mode: rowData.tableData.editing,\n              options: this.props.options,\n              isTreeData: this.props.isTreeData,\n              detailPanel: this.props.detailPanel,\n              onEditingCanceled: this.props.onEditingCanceled,\n              onEditingApproved: this.props.onEditingApproved,\n              getFieldValue: this.props.getFieldValue,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 56,\n                columnNumber: 15\n              }\n            });\n          } else {\n            return /*#__PURE__*/React.createElement(this.props.components.Row, {\n              actions: this.props.actions,\n              key: index,\n              columns: this.props.columns,\n              components: this.props.components,\n              data: rowData,\n              detailPanel: this.props.detailPanel,\n              getFieldValue: this.props.getFieldValue,\n              icons: this.props.icons,\n              path: [...this.props.path, index],\n              onRowSelected: this.props.onRowSelected,\n              onRowClick: this.props.onRowClick,\n              onToggleDetailPanel: this.props.onToggleDetailPanel,\n              options: this.props.options,\n              isTreeData: this.props.isTreeData,\n              onTreeExpandChanged: this.props.onTreeExpandChanged,\n              onEditingCanceled: this.props.onEditingCanceled,\n              onEditingApproved: this.props.onEditingApproved,\n              hasAnyEditingRow: this.props.hasAnyEditingRow,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 75,\n                columnNumber: 15\n              }\n            });\n          }\n        });\n      }\n    }\n\n    const freeCells = [];\n\n    for (let i = 0; i < this.props.level; i++) {\n      freeCells.push( /*#__PURE__*/React.createElement(TableCell, {\n        padding: \"checkbox\",\n        key: i,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 22\n        }\n      }));\n    }\n\n    let value = this.props.groupData.value;\n\n    if (column.lookup) {\n      value = column.lookup[value];\n    }\n\n    let title = column.title;\n\n    if (typeof title !== \"string\") {\n      title = React.cloneElement(title);\n    }\n\n    let separator = this.props.options.groupRowSeparator || \": \";\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TableRow, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }\n    }, freeCells, /*#__PURE__*/React.createElement(CustomCell, {\n      colSpan: colSpan,\n      padding: \"none\",\n      columnDef: column,\n      value: value,\n      icons: this.props.icons,\n      groupData: this.props.groupData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card d-flex flex-row align-items-center justify-content-between p-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"flex-column d-flex text-left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"text-primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }\n    }, this.props.groupData.value, \" \", this.props.groupData.data.length)), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"d-flex align-items-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 15\n      }\n    }, this.props.groupData.data.length, \" Result\", \" \", /*#__PURE__*/React.createElement(IconButton, {\n      style: {\n        transition: \"all ease 200ms\",\n        ...this.rotateIconStyle(this.props.groupData.isExpanded)\n      },\n      onClick: event => {\n        this.props.onGroupExpandChanged(this.props.path);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(this.props.icons.DetailPanel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 19\n      }\n    })))))), detail);\n  }\n\n}\nCustomGroupRow.defaultProps = {\n  columns: [],\n  groups: [],\n  options: {},\n  level: 0\n};\nCustomGroupRow.propTypes = {\n  actions: PropTypes.array,\n  columns: PropTypes.arrayOf(PropTypes.object),\n  components: PropTypes.object,\n  detailPanel: PropTypes.oneOfType([PropTypes.func, PropTypes.arrayOf(PropTypes.object)]),\n  getFieldValue: PropTypes.func,\n  groupData: PropTypes.object,\n  groups: PropTypes.arrayOf(PropTypes.object),\n  hasAnyEditingRow: PropTypes.bool,\n  icons: PropTypes.object,\n  isTreeData: PropTypes.bool.isRequired,\n  level: PropTypes.number,\n  localization: PropTypes.object,\n  onGroupExpandChanged: PropTypes.func,\n  onRowSelected: PropTypes.func,\n  onRowClick: PropTypes.func,\n  onToggleDetailPanel: PropTypes.func.isRequired,\n  onTreeExpandChanged: PropTypes.func.isRequired,\n  onEditingCanceled: PropTypes.func,\n  onEditingApproved: PropTypes.func,\n  options: PropTypes.object,\n  path: PropTypes.arrayOf(PropTypes.number)\n};","map":{"version":3,"sources":["/Users/edgarspuce/React/spending-tool/src/MaterialUI/CustomComponent.js"],"names":["TableCell","TableRow","IconButton","PropTypes","React","CustomCell","CustomGroupRow","Component","rotateIconStyle","isOpen","transform","render","colSpan","props","columns","filter","columnDef","hidden","length","options","selection","detailPanel","actions","column","groups","level","detail","groupData","isExpanded","map","index","value","components","getFieldValue","icons","path","onGroupExpandChanged","onRowSelected","onRowClick","onToggleDetailPanel","onTreeExpandChanged","onEditingCanceled","onEditingApproved","hasAnyEditingRow","isTreeData","data","rowData","tableData","editing","localization","freeCells","i","push","lookup","title","cloneElement","separator","groupRowSeparator","transition","event","defaultProps","propTypes","array","arrayOf","object","oneOfType","func","bool","isRequired","number"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-vars */\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport PropTypes from \"prop-types\";\nimport * as React from \"react\";\n/* eslint-enable no-unused-vars */\nimport CustomCell from \"./CustomCell\";\n\nexport default class CustomGroupRow extends React.Component {\n  rotateIconStyle = (isOpen) => ({\n    transform: isOpen ? \"rotate(90deg)\" : \"none\",\n  });\n\n  render() {\n    let colSpan = this.props.columns.filter((columnDef) => !columnDef.hidden)\n      .length;\n    this.props.options.selection && colSpan++;\n    this.props.detailPanel && colSpan++;\n    this.props.actions && this.props.actions.length > 0 && colSpan++;\n    const column = this.props.groups[this.props.level];\n\n    let detail;\n    if (this.props.groupData.isExpanded) {\n      if (this.props.groups.length > this.props.level + 1) {\n        // Is there another group\n        detail = this.props.groupData.groups.map((groupData, index) => (\n          <this.props.components.GroupRow\n            actions={this.props.actions}\n            key={groupData.value || \"\" + index}\n            columns={this.props.columns}\n            components={this.props.components}\n            detailPanel={this.props.detailPanel}\n            getFieldValue={this.props.getFieldValue}\n            groupData={groupData}\n            groups={this.props.groups}\n            icons={this.props.icons}\n            level={this.props.level + 1}\n            path={[...this.props.path, index]}\n            onGroupExpandChanged={this.props.onGroupExpandChanged}\n            onRowSelected={this.props.onRowSelected}\n            onRowClick={this.props.onRowClick}\n            onToggleDetailPanel={this.props.onToggleDetailPanel}\n            onTreeExpandChanged={this.props.onTreeExpandChanged}\n            onEditingCanceled={this.props.onEditingCanceled}\n            onEditingApproved={this.props.onEditingApproved}\n            options={this.props.options}\n            hasAnyEditingRow={this.props.hasAnyEditingRow}\n            isTreeData={this.props.isTreeData}\n          />\n        ));\n      } else {\n        detail = this.props.groupData.data.map((rowData, index) => {\n          if (rowData.tableData.editing) {\n            return (\n              <this.props.components.EditRow\n                columns={this.props.columns}\n                components={this.props.components}\n                data={rowData}\n                icons={this.props.icons}\n                path={[...this.props.path, index]}\n                localization={this.props.localization}\n                key={index}\n                mode={rowData.tableData.editing}\n                options={this.props.options}\n                isTreeData={this.props.isTreeData}\n                detailPanel={this.props.detailPanel}\n                onEditingCanceled={this.props.onEditingCanceled}\n                onEditingApproved={this.props.onEditingApproved}\n                getFieldValue={this.props.getFieldValue}\n              />\n            );\n          } else {\n            return (\n              <this.props.components.Row\n                actions={this.props.actions}\n                key={index}\n                columns={this.props.columns}\n                components={this.props.components}\n                data={rowData}\n                detailPanel={this.props.detailPanel}\n                getFieldValue={this.props.getFieldValue}\n                icons={this.props.icons}\n                path={[...this.props.path, index]}\n                onRowSelected={this.props.onRowSelected}\n                onRowClick={this.props.onRowClick}\n                onToggleDetailPanel={this.props.onToggleDetailPanel}\n                options={this.props.options}\n                isTreeData={this.props.isTreeData}\n                onTreeExpandChanged={this.props.onTreeExpandChanged}\n                onEditingCanceled={this.props.onEditingCanceled}\n                onEditingApproved={this.props.onEditingApproved}\n                hasAnyEditingRow={this.props.hasAnyEditingRow}\n              />\n            );\n          }\n        });\n      }\n    }\n\n    const freeCells = [];\n    for (let i = 0; i < this.props.level; i++) {\n      freeCells.push(<TableCell padding=\"checkbox\" key={i} />);\n    }\n\n    let value = this.props.groupData.value;\n    if (column.lookup) {\n      value = column.lookup[value];\n    }\n\n    let title = column.title;\n    if (typeof title !== \"string\") {\n      title = React.cloneElement(title);\n    }\n\n    let separator = this.props.options.groupRowSeparator || \": \";\n\n    return (\n      <>\n        <TableRow>\n          {freeCells}\n          <CustomCell\n            colSpan={colSpan}\n            padding=\"none\"\n            columnDef={column}\n            value={value}\n            icons={this.props.icons}\n            groupData={this.props.groupData}\n          >\n            <div className=\"card d-flex flex-row align-items-center justify-content-between p-4\">\n              <div className=\"flex-column d-flex text-left\">\n                {/* row name */}\n                {/* <span className=\"text-muted mb-2\">Value</span> */}\n                <span className=\"text-primary\">\n                  {this.props.groupData.value}{\" \"}\n                  {this.props.groupData.data.length}\n                </span>\n              </div>\n              <span className=\"d-flex align-items-center\">\n                {/* item count */}\n                {this.props.groupData.data.length} Result{\" \"}\n                <IconButton\n                  style={{\n                    transition: \"all ease 200ms\",\n                    ...this.rotateIconStyle(this.props.groupData.isExpanded),\n                  }}\n                  onClick={(event) => {\n                    this.props.onGroupExpandChanged(this.props.path);\n                  }}\n                >\n                  <this.props.icons.DetailPanel />\n                </IconButton>\n              </span>\n            </div>\n          </CustomCell>\n        </TableRow>\n        {detail}\n      </>\n    );\n  }\n}\n\nCustomGroupRow.defaultProps = {\n  columns: [],\n  groups: [],\n  options: {},\n  level: 0,\n};\n\nCustomGroupRow.propTypes = {\n  actions: PropTypes.array,\n  columns: PropTypes.arrayOf(PropTypes.object),\n  components: PropTypes.object,\n  detailPanel: PropTypes.oneOfType([\n    PropTypes.func,\n    PropTypes.arrayOf(PropTypes.object),\n  ]),\n  getFieldValue: PropTypes.func,\n  groupData: PropTypes.object,\n  groups: PropTypes.arrayOf(PropTypes.object),\n  hasAnyEditingRow: PropTypes.bool,\n  icons: PropTypes.object,\n  isTreeData: PropTypes.bool.isRequired,\n  level: PropTypes.number,\n  localization: PropTypes.object,\n  onGroupExpandChanged: PropTypes.func,\n  onRowSelected: PropTypes.func,\n  onRowClick: PropTypes.func,\n  onToggleDetailPanel: PropTypes.func.isRequired,\n  onTreeExpandChanged: PropTypes.func.isRequired,\n  onEditingCanceled: PropTypes.func,\n  onEditingApproved: PropTypes.func,\n  options: PropTypes.object,\n  path: PropTypes.arrayOf(PropTypes.number),\n};\n"]},"metadata":{},"sourceType":"module"}